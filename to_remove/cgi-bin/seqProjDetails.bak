#!/usr/bin/python


import cgi

link = cgi.FieldStorage()
import os, sys

CH = open("../template/cgi_header", "r")
cgiHeader = CH.readlines()
CH.close()

HF = open("../template/template_top.html", "r")
topLines = HF.readlines()
HF.close()

FF = open("../template/template_bottom.html", "r")
bottomLines = FF.readlines()
FF.close()

from API.seqProj2array import seqProj2array
from API.seqProject import seqProject
from API.runQuery import runQuery
from API.getState import getState
from API.getRunByID import getRunByID
from PL_CONTROL.demux import demux

# print "<p>Loaded modules</p>"




for ch in cgiHeader:
    print
    ch[:-1]
for he in topLines:
    print
    he[:-1]






# print "<p>",link.keys(),"</p>"
projectID = link["projID"].value
# print "<p>ProjectID",projectID,"</p>"




DBquery = "select parentID from typeLinker where childID=" + projectID
res = runQuery(DBquery)
if len(res) == 0:
    print
    "<p>This sequencing project isn't linked to any master project.</p>"
else:
    print
    "<p>This sequencing project is linked to the following master projects:</p>"
    # print "<p>",res,"</p>"
    print
    "<p>"
    for mp in range(0, len(res)):
        DBquery = "select projectName from masterProject where masterProjectID=" + str(res[mp][0])
        # print DBquery
        mPres = runQuery(DBquery)
        print
        '<a href="/cgi-bin/getProjectFromDB?projName=' + str(mPres[0][0]) + '&projID=' + str(
            res[mp][0]) + '">' + str(mPres[0][0]) + '</a><br>'
    print
    "</p>"

status = getState("sequencing", projectID)

print
"<p>Project status: <a href='/cgi-bin/status?type=sequencing&itemID=" + str(
    projectID) + "'><img src='/images/status_" + status + ".gif' alt='status_" + status + "' ></a></p>"

# for fo in bottomLines:
#        print fo[:-1]

# sys.exit()



# setup the seqProject
i = seqProject(0)
i.getSeqProjByID(projectID)

DBquery = "select seqProject.seqRunID, seqRun.seqRunName from seqProject, seqRun  where seqProjectID=" + projectID + " and seqProject.seqRunID=seqRun.seqRunID"

# print "<p>",DBquery,"</p>"



seqRunStuff = runQuery(DBquery)

# print "<p>",seqRunStuff,"</p>"




print
"<p>This sequencing project belongs to sequencing run:"
print
'<a href="/cgi-bin/getSeqRunFromDB?projID=' + str(seqRunStuff[0][0]) + '">' + seqRunStuff[0][1] + '</a>'
print
"</p>"







# Get the IDs of all of the lanes in this project
laneDataIDs = i.getLaneDataIDs()
i.addLaneData()


# Work down to the lane layer
for la in range(0, len(laneDataIDs)):
    # add a lane instance
    if la > 0 or len(i.lanes) == 0:
        if i.lanes[-1].laneID != "NULL":
            i.addLaneData()

    i.lanes[-1].getLaneDataByID(laneDataIDs[la][0])

    sampleIDs = i.lanes[-1].getSampleIDs()
    # print sampleIDs
    i.lanes[-1].addSamples()
    # Now we move into the sample layer
    for sa in range(0, len(sampleIDs)):
        # add a sample instance
        if sa > 0 or len(i.lanes[-1].samples) == 0:
            if i.lanes[-1].samples[-1].sampleID != 0:
                i.lanes[-1].addSamples()

        i.lanes[-1].samples[-1].getSampleDataByID(sampleIDs[sa][0])

projArr = []
projArr.append(i)
# print projArr



d = seqProj2array(projArr)

# print "<p>",d,"</p>"








print
'<script>'
print
'function swapDisplayed(idA,idB){'
print
'		var docA = document.getElementById(idA);'
print
'		if (docA.style.display == "none")'
print
'			docA.style.display = "inline";'
print
'		var docB = document.getElementById(idB);'
print
'                if (docB.style.display == "inline")'
print
'                        docB.style.display = "none";'
print
'	}'
print
'</script>'

print
"<hr>"
print
"<h3>Sequencing Project Details</h3>"

print
'<div id="runDetailsShown" style="display:inline">'
print
"""<a href="javascript:swapDisplayed('runDetailsHidden','runDetailsShown')">hide details</a> """
print
"<script src='/js/seqProjectTable.js'></script>"
print
"<script>"
print
d
print
"experimentTable(runArr);"
print
"</script>"
print
'</div>'

print
'<div id="runDetailsHidden" style="display:none">'
print
"""<a href="javascript:swapDisplayed('runDetailsShown','runDetailsHidden')">show details</a> """
print
'</div>'

print
'<script>'
print
'var contentCell=document.getElementById("content");'
print
'var runDetailsShown=document.getElementById("runDetailsShown");'
print
'var runDetailsHidden=document.getElementById("runDetailsHidden");'
print
'var contentCell.appendChild(runDetailsShown);'
print
'var contentCell.appendChild(runDetailsHidden);'
print
'</script>'

"""
DBquery="select demuxID, sourceLocation, location, status from demultiplex where seqProjectID="+projectID
print "<p>",DBquery,"</p>"
res=runQuery(DBquery)
"""
# put demux stuff here
DBquery = 'select * from demultiplex where seqProjectID=' + str(projectID)
# print "<p>",DBquery,"</p>"
demuxed = runQuery(DBquery)
# print demuxed
# demuxed="0"
print
"<hr>"


# for fo in bottomLines:
#        print fo[:-1]

# sys.exit()



if len(demuxed) == 0:
    print
    "<p>This sequencing project has not been demultiplexed using BioCIS</p>"
else:
    print
    "<h3>Demultiplexing:</h3>"
    # print "<p>",demuxed,"</p>"

    j = getRunByID(i.seqRunID)

    # for fo in bottomLines:
    #	print fo[:-1]

    # sys.exit()





    # print "<p>",j.seqRunID,"</p>"
    # print "<p>",j.dataLocation,"</p>"

    # os.environ['PATH']='/var/www/biocis/cgi-bin/PL_CONTROL'
    from PL_CONTROL.demux import demux

    try:
        dm = demux(i, j)
    except Exception:
        print
        "<p>Error - Unable to create deumux object instance.</p>"

    try:
        dm.getDemuxStatus()
    except Exception:
        print
        "<p>Error - Unable to get demultiplexing status.</p>"

print
'<p><a href="/cgi-bin/demuxProject?projID=' + str(projectID) + '">Demultiplex this project.</a></p>'

for fo in bottomLines:
    print
    fo[:-1]
